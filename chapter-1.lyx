#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% http://mirrors.ctan.org/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}

% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
% if you uncomment the following lines, you cannot use the reference version Ref+Text in LyX
%\AtBeginDocument{%
% \renewcommand{\ref}[1]{\autoref{#1}}
%}
%\def\refnamechanges{%
% \renewcommand*{\equationautorefname}[1]{}
% \renewcommand{\sectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
% \renewcommand{\figureautorefname}{Fig.\negthinspace}
% \renewcommand{\tableautorefname}{Tab.\negthinspace}
%}
%\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master /usr/share/lyx/examples/thesis/thesis.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
General Frame of the Project
\end_layout

\begin_layout Section*
Introduction 
\end_layout

\begin_layout Standard
In this chapter, I will start by presenting the host company, along with
 a presentation of the problem I am trying to solve, afterward I will introduce
 my proposed solution.
\end_layout

\begin_layout Section
Presentation of the host organization
\end_layout

\begin_layout Standard
Human Resources field is a vast fertile ground for innovation, this is where
 Advyteam chose to operate, by creating an HR Solution named 
\begin_inset Quotes eld
\end_inset

Accretio
\begin_inset Quotes erd
\end_inset

, suited for all kind of enterprises, it spans different areas of expertise,
 divided in several modules which the client can choose from.
 Modules such Core HR functionallities, Talent Management, Leave Management,
 and others.
\end_layout

\begin_layout Standard
Currently, Accretio is an install based application, however, the company
 is actively porting the application to a SAAS (Software as a service) based
 one, with support of multi-tenancy, automatic scaling, etc.
 Accretio uses the microservice architecture, which makes creating new services,
 and plugin in new services relatively easy.
\end_layout

\begin_layout Standard
Advyteam is a young company, established 2011 by three human resources tunisian
 specialists, its headquarters is situated in Paris, France.
\end_layout

\begin_layout Standard
Besides its Human resource management system accretio, Advyteam also provides
 certification programs in Human resources throught its Advyteam Academy,
 and offers training and coaching in almost all of the human resources feilds.
\end_layout

\begin_layout Section
Project Background
\end_layout

\begin_layout Standard
With its effort to port the application to a SAAS software model, the company's
 engineers have faced several problems, one of these problems is how to
 give the ability to a user of the application to define, launch and monitor
 batch jobs.
\end_layout

\begin_layout Standard
A batch job is a computer program or set of programs processed in batch
 mode.
 This means that a sequence of commands to be executed by the operating
 system and submitted for execution as a single unit.
\begin_inset CommandInset citation
LatexCommand cite
key "afrx"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
Currently, the application have several built-in batch jobs, such as calculating
 the employees payrolls, leaves, evaludations, etc.
 However, those batches are neither extendible nor configurable.
 
\end_layout

\begin_layout Standard
Say we have 2 clients, they both need to generate their employees payrolls,
 yet they both have different businness rules to calculate the salary, in
 this case we may end up writing 2 separate batches for each client.
 
\end_layout

\begin_layout Standard
Furthermore, each time a client comes up with a new use case for batch processin
g, or a new buissness rule to be excuted in a batch job, he have to revert
 to the Advyteam developers to write a new specific batch, which could be
 very tideous in a SAAS architecture with tens or hundreds of clients.
\end_layout

\begin_layout Standard
In the next section, I will present the different solutions that we came
 up to try to solve the above problem.
\end_layout

\begin_layout Section
Proposed Solution
\end_layout

\begin_layout Standard
The most challenging aspect of this project, is how to provide to the client,
 a mean to insert his own logic into the application, with little or no
 help from the Advyteam team.
\end_layout

\begin_layout Standard
Before we dig into the different solutions, we need to have a very basic
 knowledge of how a batch work, we will dive deeper on how a batch work
 in future chapters.
\end_layout

\begin_layout Standard
A batch job is mainly composed of at least one step, each step itself is
 divided into three other steps; 
\end_layout

\begin_layout Itemize
A reading step, from which we will read the data that will be processed,
 this 
\begin_inset Quotes eld
\end_inset

data
\begin_inset Quotes erd
\end_inset

 is the list of the registration numbers of the employees that would be
 proceesed.
\end_layout

\begin_layout Itemize
A processing step, where the data that has been read in the previsous step
 be will processed, this step will hold the client buissness logic.
\end_layout

\begin_layout Itemize
A writing step, where you can write the changes that you have made in a
 datasource, generate reports...
 etc.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/simplebatchjob.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Simple Batch Job Execution Components
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We need to find out a way where the client can enter his own logic for all
 of the three steps mentioned above, then somehow insert them and execute
 them into our application.
\end_layout

\begin_layout Standard
I will detail in the next subsection the solutions that we came up with
 and the choice we made;
\end_layout

\begin_layout Subsection
RESTful APIs calls
\end_layout

\begin_layout Standard
The first solution we came up with, is to create a single batch job that
 consumes a RESTful API for each step, where we can call for the reading,
 processing and writing.
 
\end_layout

\begin_layout Standard
However this solution mandates that the client expose these RESTful APIs,
 and host it somewhere on his own servers, we cannot garentee that all of
 our clients would be able to host a RESTful APIs.
\end_layout

\begin_layout Standard
Another drawback is this solution would be very inefficient, we would bombard
 the client servers with our calls, and the processing would be done on
 their servers aswell.
\end_layout

\begin_layout Standard
This solution is quite simple, but presents lots of inefficiencies.
\end_layout

\begin_layout Subsection
Rule Engine
\end_layout

\begin_layout Standard
We could also use a rule engine (such as drools), give the client the ability
 to define the rules that he would like to apply, and execute those rules
 when selecting the employees population (reading step), and also in the
 processing step.
\end_layout

\begin_layout Standard
As you can notice, this solution is very limitted to the number of possiblities
 that the client can chose from (finite list of rules), and would be able
 to define very simple and basic operations, simple filtering in the reading
 step, and basic math operations in the processing step.
 
\end_layout

\begin_layout Standard
The client have no control over the reading step, which is another great
 limitation, and no controls over the data structure to be used.
\end_layout

\begin_layout Subsection
JAR Implementation
\end_layout

\begin_layout Standard
We decided to go Java's way, using specifications.
 The solution we went for is to create seperate 2 jars: 
\end_layout

\begin_layout Itemize
Specifications Jar: Also called 
\begin_inset Quotes eld
\end_inset

Template Jar
\begin_inset Quotes erd
\end_inset

, which will be handed to the client, where he has to implement in order
 to write his own business logic.
 This jar will contain a set of interfaces and abstract classes, for each
 of the 3 steps mentioned above.
 The classes that the client wrote, would then be autowired in a runner
 jar.
\end_layout

\begin_layout Itemize
Runner jar: Will hold the batch steps definitions and configurations, and
 would execute the methods that has been wrote by the client in our environment,
 by autowiring/injecting the classes that have been implemented.
\end_layout

\begin_layout Standard
After implementing the Template Jar, the client only needs to upload the
 generated Jar, through the frontend application form, and specifies a set
 of options, such the datasource that would be used in the reading step,
 is the job scheduled, number of retries ..., he can then manage these jobs,
 by starting them, stoping, monitoring, view generated reports, and so on.
\end_layout

\begin_layout Standard
We will go through the job configuration options in details in later chapters.
\end_layout

\begin_layout Section*
Conclusion
\end_layout

\begin_layout Standard
In this chapter, I presented the frame on which this project is based on,
 by introducing the host company as well as the needs behind the project.
 Finally, I ended up this project by presenting the different proposed solutions
, and the one that we went with.
 The following chapter will be devoted to the analysis and the design of
 the application.
\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
inverted 0
status collapsed

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document

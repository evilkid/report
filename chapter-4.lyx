#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% http://mirrors.ctan.org/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}

% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
% if you uncomment the following lines, you cannot use the reference version Ref+Text in LyX
%\AtBeginDocument{%
% \renewcommand{\ref}[1]{\autoref{#1}}
%}
%\def\refnamechanges{%
% \renewcommand*{\equationautorefname}[1]{}
% \renewcommand{\sectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
% \renewcommand{\figureautorefname}{Fig.\negthinspace}
% \renewcommand{\tableautorefname}{Tab.\negthinspace}
%}
%\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master /usr/share/lyx/examples/thesis/thesis.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Implementation
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
This chapter discusses the implementation of the microservice components.
 I will begin by presenting the development environment on which this project
 was developed, presenting the technologies used, finally I will present
 key aspects of the solution done alongside some screenshots of the main
 parts of the application.
\end_layout

\begin_layout Section
Development Environment
\end_layout

\begin_layout Standard
Numerous Technologies have been used in order to successfully achieve this
 work, in this section I will go briefly on the most important ones;
\end_layout

\begin_layout Standard

\shape italic
IntelliJ IDEA
\shape default
 have been chosen as the Integrated Development Environment (IDE) for its
 remarkable support for both Java and Angular framework, which in turn boosts
 productivity.
\end_layout

\begin_layout Standard
As for the database, I had to use both 
\shape italic
MongoDB
\shape default
, and 
\shape italic
MySQL
\shape default
.
 Accretio is built upon 
\shape italic
MongoDB
\shape default
, all the employees population is stored in 
\shape italic
MongoDB
\shape default
 instance, in addition, 
\shape italic
Spring Batch
\shape default
 does not support non-relational databases, thus the use of 
\shape italic
MySQL,
\shape default
 along with 
\shape italic
MongoDB
\shape default
.
\end_layout

\begin_layout Standard
For the backend, I have used 
\shape italic
JHipster
\shape default
 to generate the microservice skeleton, which generates a 
\shape italic
Spring Boot Application
\shape default
.
 The 
\shape italic
Spring Cloud
\shape default
 framework makes it very easy to deal with a microservices application,
 that with the powerful 
\shape italic
Spring Framework
\shape default
 for Dependency Injection, 
\shape italic
Spring Security
\shape default
 for authentication and authorization, 
\shape italic
Spring MVC
\shape default
 for RESTful APIs, 
\shape italic
Spring Data JPA/Mongo
\shape default
 to deal with entities, 
\shape italic
Spring Integration
\shape default
 for a reliable communication between the Job execution and the main microservic
e, and of course 
\shape italic
Spring Batch
\shape default
.
 In addition to several other Spring projects, but overall, the whole backend
 technology stack is based on 
\shape italic
Spring
\shape default
 technologies.
\end_layout

\begin_layout Standard
As for the frontend, 
\shape italic
Angular 4
\shape default
 was used, with the rich UI components library 
\shape italic
PrimeNG
\shape default
, that provided several out-of-the-box UI components.
\end_layout

\begin_layout Standard
In order to maintain an asynchronous communication, 
\shape italic
Kafka
\shape default
 was used as the broker for our asynchronous messages, along with the 
\shape italic
Avro
\shape default
 serialization framework.
\end_layout

\begin_layout Standard
Finally, 
\shape italic
ELK
\shape default
 stack (Elasticsearch, Logstash, Kibana) had been setup as a mean to go
 through and visualize the logs that has been generated by both the microservice
, and the executed batch jobs.
\end_layout

\begin_layout Section
Solution
\end_layout

\begin_layout Standard
The following section will contain detailed information about the adopted
 solution, starting by spring batch integration, listing the different configura
tion possible, a walk-through of the reporting engine and logs management.
 Finally, I'll take a few screenshots representing the final outcome.
\end_layout

\begin_layout Subsection
Spring Batch Steps
\end_layout

\begin_layout Standard
As described in the first chapter, the solution is composed of several steps,
 some steps are defined by the customer, while others are pre-coded.
 I have divided the solution into two steps:
\end_layout

\begin_layout Itemize
A step for reading the employees population, and store them into a temporary
 database, this step is itself divided into 3 other phases following the
 ETL (Extract, Transform and Load) style:
\end_layout

\begin_deeper
\begin_layout Itemize
Reading phase (Extracting): This is where the client business logic (for
 reading) is injected, when configuring the job, he can chose from three
 datasource types: JDBC, File (Excel, CSV, ...) and a messaging queue.
 Upon executing the reading method, the datasource would be built (using
 the configuration that the client has setup), and given to the client to
 be used in his implementation.The expected output of this phase is a list
 of registration numbers for the employees that would be processed by the
 batch.
\end_layout

\begin_layout Itemize
Processing Phase (Transform): This phase is already written, giving the
 output of the previous phase, a new object (population) is constructed
 for each registration number.
\end_layout

\begin_layout Itemize
Writing Phase (Load): At the end, we need to store the processed population
 objects, into a temporary database, for two reasons, the first is to pass
 this data to the next step, and the second is a to lock that population
 so that future jobs cannot access it and also to check if it is already
 locked.
 In that case, the whole job would be marked as Locked, and is re-queued
 until to lock is released.
\end_layout

\end_deeper
\begin_layout Itemize
A step for processing the employees that have been read by the first step,
 same as the previous one, it is divided into 3 phases:
\end_layout

\begin_deeper
\begin_layout Itemize
Reading phase: Reads the registration numbers that would be process off
 of the temporary database.
\end_layout

\begin_layout Itemize
Processing phase: This is the most essential part of the batch implementation.
 This is where the processing is done and where the client processing business
 logic is injected.
 The input that has been read in the previous phase is used as an input,
 while the output is totally set and controlled by the client.
\end_layout

\begin_layout Itemize
Writing phase: This phase is also handled by the client, after the processing
 phase is finished, the client can chose to manipulate the data as he wishes
 to, such as storing it into file system, save logs, etc.
 In addition to that, the client is provided with a rich templating engine,
 where he can generate for each processed employee a report, with a template
 of his choosing.
 This report would be save into our system, and can be viewed/downloaded
 at demand.
\end_layout

\end_deeper
\begin_layout Standard

\shape italic
Figure 4.1
\shape default
 below (taken from 
\shape italic
chapter 1
\shape default
) provide more insight to the solution, and detailing the work flow of the
 inputs and outpus.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/BatchSolution.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Graphical Representation of the Solution
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Asynchronous Communication
\end_layout

\begin_layout Standard
There is a limit on how many Job Batches that can run simultaneously, limitation
s are both technical and functional.
 Batches are resource demanding tasks, running too many jobs would result
 in a very slow system response time, or even system failure.
 Functionally, jobs that share the same population cannot run concurrently.
 Therefore I used a queue (Kafka), to queue the job execution demands, I
 also control how many concurrent job the system could run, by specifying
 the number of Kafka consumer threads.
 Job executions that are queued are of two types: new execution and restarting
 a stopped, failed or locked execution.
 
\end_layout

\begin_layout Standard
As stated in the first section of this chapter, I am using Avro serialization
 system with Kafka, to serialize and deserialize the queued events.
\end_layout

\begin_layout Standard
Apache Kafka was chosen for its highly distributed, partitioned and replicated
 architecture, which would fit best with our SaaS model.
 Kafka was designed with distribution in mind, unlike other Asynchronous
 Communication systems, which makes it scalable, elastic and resilient.
\end_layout

\begin_layout Standard

\shape italic
Figure 4.2
\shape default
 below, shows a comparison between Apache Kafka and some other well known
 brokers.
 As represented in the figure, Kafka can handle up to 35000 messages per
 second which is almost the double capacity of the HornetQ.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/kakfka_rabbitmq_other_performance.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kafka Performance vs others 
\begin_inset CommandInset citation
LatexCommand cite
key "KAFKA"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kafka was also used for its great support with Spring, works on JVM, and
 for its matureness, Kafka is 6 years old, and used by major IT companies.
\end_layout

\begin_layout Standard
As for the Avro, it was chosen for mainly two aspect (the serilized object
 that would be send to kafka is called datum):
\end_layout

\begin_layout Itemize
Schema Evlotion: When Serilizeing or Deserilizing, avro uses a pre-defined
 schema, however, avro support schema evlotion (missing, extra or modified
 fields)
\end_layout

\begin_layout Itemize
Untagged Data: The format of an Avro datum is binary, unlike other format
 such as JSON or XML, the datum is written without overhead describing each
 field length or type, instead these information are extracted from the
 schema.
 This process renders the size of the datum extremely small.
\end_layout

\begin_layout Subsection
Configuration
\end_layout

\begin_layout Standard
The requirement was to externlize as much configuration as possible, without
 having to change the code and re-compile the whole microservices.
 Consequently, I have divided the configuration into two types, 
\begin_inset Quotes eld
\end_inset

System
\begin_inset Quotes erd
\end_inset

 configuration which controls serveral variables of the microservice, and
 
\begin_inset Quotes eld
\end_inset

Batch
\begin_inset Quotes erd
\end_inset

 configuration that defines the variables required to run a job.
 Next I will list all the properties for each configuration type:
\end_layout

\begin_layout Itemize
Sytem
\end_layout

\begin_deeper
\begin_layout Itemize
uploaddir: Dirctory where all user uploaded files resides (Reports, Data
 files, etc)
\end_layout

\begin_layout Itemize
dirjar: Directory where all user uploaded jars resides
\end_layout

\begin_layout Itemize
dirbatchrunner: Location of the Batch Runner jar
\end_layout

\begin_layout Itemize
launcherthreads: Number of threads for the kafka consumer
\end_layout

\begin_layout Itemize
logsdir: Places where all the batch logs are saved to.
\end_layout

\begin_layout Itemize
kafka:
\end_layout

\begin_deeper
\begin_layout Itemize
topic: The name of the kafka topic to be used
\end_layout

\begin_layout Itemize
host: The hostname of the kafka broker
\end_layout

\begin_layout Itemize
port: The port for the kafka broker
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Batch
\end_layout

\begin_deeper
\begin_layout Itemize
job
\end_layout

\begin_deeper
\begin_layout Itemize
name: An unique identifier to represent the name of the job
\end_layout

\begin_layout Itemize
scheduled: boolean flag to state whether this job would be scheduled or
 not
\end_layout

\begin_layout Itemize
schedule-time: if the scheduled flag is set to true, this parameter states
 the time of the excution
\end_layout

\begin_layout Itemize
execution-id: when restarting a job, this parameter identify the previous
 job execution that has been stopped.
\end_layout

\end_deeper
\begin_layout Itemize
populationId: the ID of the population (in the temporary database) to be
 used, case of a job restart
\end_layout

\begin_layout Itemize
retriable: states if in case of a failure (in any of the steps), the job
 should retry or not.
\end_layout

\begin_layout Itemize
maxretry: number of time to retry until failure
\end_layout

\begin_layout Itemize
datasource
\end_layout

\begin_deeper
\begin_layout Itemize
type: Enum represnts the type of the datasource (JDBC, File, Message)
\end_layout

\begin_layout Itemize
driver-class-name: if the type is JDBC, this parameter represent the database
 driver, currently, we are supporting MySQL
\end_layout

\begin_layout Itemize
url: url of the database (hostname, port and schema)
\end_layout

\begin_layout Itemize
username: Username of the database
\end_layout

\begin_layout Itemize
pasword: Password of the database
\end_layout

\begin_layout Itemize
file: if the type is File, this represents the location of the file to be
 read
\end_layout

\begin_layout Itemize
message: if the type is Message:
\end_layout

\begin_deeper
\begin_layout Itemize
host: Represent the hostname of the kafka broker
\end_layout

\begin_layout Itemize
port: Port of the kafka broker that is listening to
\end_layout

\begin_layout Itemize
topic: Name of the topic to read the data from
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
specific-report-template-id: The id of the template that would be used to
 generate the specific report for each processed employee
\end_layout

\begin_layout Itemize
specific-report-template-type: The type of the document that would be generated
 (PDF, DOC, HTML)
\end_layout

\end_deeper
\begin_layout Subsection
Report templating & generation
\end_layout

\begin_layout Standard
Another important part of the project is template managing and report generation.
 Basically we have two types of reports
\end_layout

\begin_layout Subsection
Logs management
\end_layout

\begin_layout Section
Overview of the achieved work
\end_layout

\begin_layout Section*
Conclusion
\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
inverted 0
status collapsed

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
